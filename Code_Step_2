 # Step 2: Scan (SAST)
    # Goal: Use an automated tool (Bandit) to analyze app.py source code for known insecure patterns without running the application.
    # Tool Choice: Bandit (Python-specific SAST tool).
    # Process:
    # Install Bandit (if needed):
    # pip install bandit
    # Run Bandit: Navigate to the directory containing app.py and run:
    # bandit app.py
    # SAST Tool Output (Expected):
    # [main]  INFO    profile include tests: None
    # [main]  INFO    profile exclude tests: None   

        Playbook Step 2: Scan (SAST)Goal: Use an automated tool (Bandit) to analyze app.py source code for known insecure patterns without running the application.Tool Choice: Bandit (Python-specific SAST tool).Process:Install Bandit (if needed):pip install bandit
Run Bandit: Navigate to the directory containing app.py and run:bandit app.py
SAST Tool Output (Expected):[main]  INFO    profile include tests: None
[main]  INFO    profile exclude tests: None
[main]  INFO    cli include tests: None
[main]  INFO    cli exclude tests: None
[main]  INFO    running on app.py
Run started:2025-04-22 19:30:00 UTC # Example timestamp

Test results:
>> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string formatting.
   Severity: Medium   Confidence: Medium
   CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
   More Info: https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html
   Location: app.py:49:8  # Line number corresponds to the 'query =' line in the artifact
   48         # which bypasses the intended ID check.
   49         query = f"SELECT id, name, price FROM products WHERE id = {product_id}"
   50         # !!! END VULNERABLE LINE !!!

--------------------------------------------------
Code scanned:
        Total lines of code: 77 # Example count based on artifact code
        Total lines skipped (#nosec): 0

Run metrics:
        Total issues (by severity):
                Undefined: 0
                Low: 0
                Medium: 1
                High: 0
        Total issues (by confidence):
                Undefined: 0
                Low: 0
                Medium: 1
                High: 0
Files skipped (0):
Analysis:Bandit successfully identified a Medium severity, Medium confidence issue (B608:hardcoded_sql_expressions).The description explicitly warns about a "Possible SQL injection vector through string formatting."It correctly pinpoints the line query = f"SELECT ... {product_id}" as the source of the potential vulnerability. This line directly incorporates user-controlled input (product_id) into the SQL command structure.This aligns perfectly with our understanding from Step 1: Bandit flags the direct concatenation/formatting of user input into an SQL query string as a dangerous pattern indicative of SQLi (CWE-89).Outcome: The automated SAST scan confirmed the presence and location of the SQL injection vulnerability pattern in the code, validating the risk identified in Step 1.
