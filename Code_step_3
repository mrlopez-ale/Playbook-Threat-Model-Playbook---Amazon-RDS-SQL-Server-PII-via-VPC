# Step 3: Fix (Secure Coding Patterns)
# Goal: Refactor the vulnerable code to use parameterized queries, eliminating the SQL injection risk.
# Process:
# 1. Replace the vulnerable line with a parameterized query using placeholders.
# 2. Use the cursor's execute method with a tuple of parameters to safely pass user input.
# 3. Ensure that the database connection is properly managed and closed.
# 4. Test the application to ensure that the vulnerability is fixed and that the application behaves as expected.
# --- SECURE ENDPOINT ---
@app.route('/product_secure/<product_id>')
def get_product_secure(product_id):     
    """
    Fetches product by ID using the provided product_id from the URL.
    THIS ENDPOINT IS SECURE AND USES PARAMETERIZED QUERIES TO PREVENT SQL INJECTION.
    The 'product_id' is passed as a parameter to the SQL query, ensuring that
    it is treated as data and not executable code.
    """
    # Check if the database connection was successfully established at startup
    if not db_conn:
        return jsonify({"error": "Database connection not available"}), 503
    # Service Unavailable
    cursor = db_conn.cursor()
    # --- SECURE LINE ---
    # The 'product_id' variable is passed as a parameter to the SQL query.
