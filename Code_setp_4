# Step 4: Fix (Secure Coding Patterns) 

# --- VULNERABLE ENDPOINT ---
@app.route('/product_vulnerable/<product_id>')
def get_product_vulnerable(product_id):
    # ... (database connection setup) ...
    cursor = db_conn.cursor()

    # !!! VULNERABLE LINE !!!
    # User input 'product_id' is directly placed into the SQL query string.
    query = f"SELECT id, name, price FROM products WHERE id = {product_id}"
    # !!! END VULNERABLE LINE !!!

    try:
        app.logger.info(f"Executing vulnerable query: {query}")
        cursor.execute(query) # The manipulated query is executed
        # ... (rest of the function) ...
    except sqlite3.Error as e:    
        app.logger.error(f"Database error for query '{query}' with input '{product_id}': {e}")
        return jsonify({"error": "Database query failed due to invalid input or syntax"}), 500
    finally:
        if cursor:
            cursor.close()
# --- SECURE ENDPOINT ---
@app.route('/product_secure/<product_id>')   
